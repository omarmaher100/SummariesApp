
dotnet new angular create project with angular
dotnet run      run project

Api Project Arc
ClientApp folder. Now this folder has the Angular-related files, so we're not going to discuss about that now. The next folder is the Controllers folder. Inside this folder we can find all the Web API controllers. So for example we have the WeatherForecastCotroller, and this controller has a single API endpoint, the Get endpoint. The next, we have the Pages folder. Inside this folder we have three files, and the most important one is the ViewImports.cshtml, which is used to import all the necessary libraries that we can use throughout the views. For example, the TagHelpers. Another important folder is the wwwroot folder, and this folder is known as the root folder for the .NET Core apps. And this folder is mainly used to store static files like images, documents, et cetera, because by keeping the static documents in here we can easily access them. Another important file is the Program.cs file. And this file is also known as the entry file for the .NET apps. In here we can see the Main method, and inside the Main method we have the CreateWebHostBuilder method. And inside this method we can see that we have configured as our startup file, the Startup.cs file. So next we have the Startup.cs file which is also known as the configuration file because basically we can do in here all the configurations like the database connection strings, the services that we want to use, et cetera. Inside the Startup.cs we have two methods, the ConfigureServices and the Configure methods. The ConfigureSevices method is used to configure dependency interaction. And on the other hand we have the Configure method which is used to setup middle wares, routing rules, et cetera. So for example if we want to use a service in the future, we can configure it inside the ConfigureServices method. 

Angulor Arc

default Angular files that were created. In our solution you can see the client app folder and the all the Angular related code goes in here. Here we have three main folders. The e2e which is used for unit testing related code. We have the node modules where we have all the libraries that we need to use to run our Angular app. And the most important folder in here is the source folder where all the code goes in. Inside the source folder we have the app folder, the assets and the environments. Inside the app we define the modules. Inside the app we have all components like counter, fetch data et cetera. Other than that we have the app.component.html which is know as the entry component file in Angular applications. If we open this file we're going to see in here that we have defined the menu and the body of our application. Then next we have the app.module.ts file and this is know as the configuration file in Angular projects. Because inside here we define all the components that we want to use, we define all the modules that we want to use and also the router for our Angular app. Then next we have the asset folder. This folder is used to generally keep the static files like for example the icon, images, documents et cetera. And inside the environments we have the two environment files like the production environment and the development environment where we define all the specific information that we want to use for each environments. Next we have the index.html which is the file where we define the route component where in this case we have defined the app-route. And then if you scroll down you will see the angular.json file where we define the Angular related configurations like for example where do we get the styles from? Which is the assets folder? Et cetera. Then next we have the package.json file where we define scripts like for example the script to build the Angular app which is the ng build, the script to run the test and even the dependencies like Angular animations, common, compiler et cetera. 


npm install -g @anglular/cli   // install angulor cli globaly

go to client app to src folder and crete 2 folders 
 component folder and services folder
ng g c book  genertate component by cli g for generate c for component
will run error becose there are more than module so we will sepecific to the name of module like that
ng g c books -m app    m for module app for the name of module

to ensure that ccomponent created go to app.module.ts
 and you will find the component was registerd

then create anthor componnent 
ng g c delete-book -m app
ng g c new-book -m app
ng g c shaw-book -m app
ng g c update-book -m app

now lets create our service
open service folder in terminal
ng g s book   g for generate s for servese called book

go to app.module.ts 
then to be able to use the book service that we just created, 
we need to include it in the providers array. 
So for that we write in here, book service. 
And then we import the necessary namespace, 
which is the services/book.service. 


then go to app.module in routerModule.forroot array
and make it when ever we have /books take this component
      { path: 'books', component: BooksComponent},
      { path: 'new-book', component: NewBookComponent},
      { path: 'update-book/:id', component: UpdateBookComponent},      
      { path: 'detele-book/:id', component: DeleteBookComponent},
      { path: 'show-book/:id', component: ShowBookComponent},

then go to nav-menu.componenet.html to change names to change route to add and books string
            <a class="nav-link text-dark" [routerLink]="['/new-book']">Add</a>
          </li>
          <li class="nav-item" [routerLinkActive]="['link-active']">
            <a class="nav-link text-dark" [routerLink]="['/books']"
              >Books</a
            >
          </li>






